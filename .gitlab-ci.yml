---
variables:
  GIT_STRATEGY: empty
  GALLUS_DIR: 'C:\gallus'
# Arret du pipline lorsque un script PowerShell produit une erreur
  ErrorActionPreference: stop

default:
  tags:
    - amd64
    - windows

cleanup:
  stage: .pre
  script: |
    if (Get-Volume | where-object { $_.filesystem -eq "UDF"}) {
      $isom = Get-Volume | where-object { $_.filesystem -eq "UDF"} | Select-Object -ExpandProperty DriveLetter | oss
      $a = -join($isom, ":")
      $driveEject = New-Object -comObject Shell.Application
      $driveEject.NameSpace(17).ParseName($a).InvokeVerb("Eject")
      for (($i = 0); $i -lt 10 -and (Get-Volume | where-object { $_.filesystem -eq "UDF"}); $i++) {
        Start-Sleep -Seconds 1
      }
      if (Get-Volume | where-object { $_.filesystem -eq "UDF"}) {
        Write-Output "Il reste une ISO montée sur la machine !"
        exit 1
      }
    }
    if (Test-Path -Path "$GALLUS_DIR") {
      Write-Output "Le dossier $GALLUS_DIR existe !"
      Write-Output "Suppression du dossier ..."
      Remove-item -recurse -force -path "$GALLUS_DIR"
    } else {
      Write-Output "Le dossier $GALLUS_DIR n'existe pas"
    }

installNuget:
  stage: .pre
  script:
    - Install-PackageProvider -Name NuGet -Force
  after_script:
    - Get-PackageProvider -Name NuGet

installWinget:
  stage: .pre
  needs: ["installNuget"]
  script:
    - Install-Module -Name Microsoft.WinGet.Client -Force -Repository PSGallery
    - Repair-WinGetPackageManager
  after_script:
    - winget

# winget ne sera pas dispnible dans le chemin ($Env:Path) du runner si ce dernier s'execute en tant que NT AUTHORITY\SYSTEM

installGit:
  stage: .pre
  needs: ["installWinget"]
  script: |
    winget list --id Git.Git --exact --source winget
    if ($LASTEXITCODE) {
      winget install --id Git.Git --exact --source winget
    } else {
      Write-Output "Git est déjà installé"
    }
  after_script:
    - '& "C:\Program Files\Git\cmd\git.exe" --help'

verifCode:
  stage: .pre
  needs: ["cleanup", "installGit"]
  before_script:
    - Install-Module -Name PSScriptAnalyzer -Force
    - "& \"C:\\Program Files\\Git\\cmd\\git.exe\" clone https://github.com/Eternilab/gallus \"$GALLUS_DIR\""
    - cd "$GALLUS_DIR"
    - '& "C:\Program Files\Git\cmd\git.exe" config set advice.detachedHead false'
    - "& \"C:\\Program Files\\Git\\cmd\\git.exe\" checkout $CI_COMMIT_SHA"
    - Set-ExecutionPolicy Bypass -Scope Process -Force
  script:
    - Invoke-ScriptAnalyzer -EnableExit -Path "$GALLUS_DIR"
  after_script:
    - Set-ExecutionPolicy Restricted -Scope Process -Force
    - Remove-item -recurse -force -path "$GALLUS_DIR"

#initSansBootstrap:
#  stage: build
#  before_script:
#    - New-Item -ItemType Directory -Force -Path "$GALLUS_DIR"
#  script: |
#    cd "$GALLUS_DIR"
#    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
#    & ([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString("https://raw.githubusercontent.com/Eternilab/gallus/$CI_COMMIT_SHA/gallus.ps1"))) -init
#    $LASTEXITCODE = 0
#  after_script:
#    - Remove-item -recurse -force -path "$GALLUS_DIR"
#
#makeSansInit:
#  stage: build
#  before_script:
#    - New-Item -ItemType Directory -Force -Path "$GALLUS_DIR"
#  script: |
#    cd "$GALLUS_DIR"
#    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
#    & ([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString("https://raw.githubusercontent.com/Eternilab/gallus/$CI_COMMIT_SHA/bootstrap.ps1"))) $CI_COMMIT_SHA
#    Set-ExecutionPolicy Bypass -Scope Process -Force
#    .\gallus.ps1 -make
#    Set-ExecutionPolicy Restricted -Scope Process -Force
#  after_script:
#    - Remove-item -recurse -force -path "$GALLUS_DIR"

runBootstrap:
  stage: build
  needs: ["verifCode"]
  before_script:
    - New-Item -ItemType Directory -Force -Path "$GALLUS_DIR"
    - cd "$GALLUS_DIR"
  script:
    - "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072"
    - "& ([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/Eternilab/gallus/$CI_COMMIT_SHA/bootstrap.ps1\"))) $CI_COMMIT_SHA"

runGallusFull:
  stage: build
  needs: ["runBootstrap"]
  before_script:
    - cd "$GALLUS_DIR"
    - Set-ExecutionPolicy Bypass -Scope Process -Force
    - Remove-Variable -ErrorAction SilentlyContinue -Name GALLUS_USB_DRIVE
  script:
    - .\gallus.ps1 -full
  after_script:
    - Set-ExecutionPolicy Restricted -Scope Process -Force

verifISO:
  stage: test
  needs: ["runGallusFull"]
  script: |
    $isoPath = "$GALLUS_DIR\GMedia\LiteTouchMedia.iso"
    if (-not (test-path $isoPath)) {
      Write-Output "fichier n'existe pas"
      exit 2
    }
    $fs = [System.IO.File]::OpenRead($isoPath)
    $fs.Seek(32769, [System.IO.SeekOrigin]::Begin) | Out-Null
    $buffer = New-Object byte[] 5
    $fs.Read($buffer, 0, 5) | Out-Null
    $fs.Close()
    $signature = [System.Text.Encoding]::ASCII.GetString($buffer)
    $fs.Close()
    if ($signature -eq "CD001") {
      Write-Output "L'iso est un 9660"
      exit 0
    } else {
      Write-Output "Le fichier n'est pas un iso 9660"
      exit 1
    }

verifTaille:
  stage: test
  needs: ["runGallusFull"]
  script: |
    $tailleFichier = (Get-ChildItem "$GALLUS_DIR\GMedia\LiteTouchMedia.iso").Length
    if ($tailleFichier -ge 4GB) {
      if ($tailleFichier -le 32GB) {
        Write-Output "Le fichier est compris entre 4 Go et 32 Go"; exit 0
      } else {
        Write-Output "Le fichier dépasse 32 Go"
        exit 1
      }
    } else {
      Write-Output "Le fichier est inférieur à 4 Go"
      exit 1
    }

montageIso:
  stage: test
  needs: ["verifISO", "verifTaille"]
  script: |
    cd "$GALLUS_DIR\GMedia"
    .\LiteTouchMedia.iso
    for (($i = 0); ($i -lt 10) -and -not (Get-Volume | where-object { $_.filesystem -eq "UDF"}); $i++) {
      Start-Sleep -Seconds 1
    }
    if (! (Get-Volume | where-object { $_.filesystem -eq "UDF"})) {
      Write-Output "L'ISO ne se monte pas !"
      exit 1
    }
    $isom = Get-Volume | where-object { $_.filesystem -eq "UDF"} | Select-Object -ExpandProperty DriveLetter | oss
    $a = -join($isom, ":")
    cd $a
    Get-ChildItem

verifPresence:
  stage: test
  needs: ["montageIso"]
  script: |
    $isom = Get-Volume | where-object { $_.filesystem -eq "UDF"} | Select-Object -ExpandProperty DriveLetter | oss
    $vol = -join($isom, ":")
    $files = @(
      'Deploy\Scripts\HardeningKitty.psd1',
      'Deploy\Scripts\finding_list_cis_microsoft_windows_11_enterprise_23h2_machine.csv',
      'Deploy\Scripts\media.tag',
      'Deploy\Scripts\AuditingScript.ps1',
      'Deploy\Scripts\CopyAuditingFiles.ps1',
      'Deploy\Scripts\CopyGallusFiles.wsf',
      'Deploy\Scripts\Eternilab.png',
      'Deploy\Scripts\GenerateGHITable.ps1',
      'Deploy\Scripts\GHI.csv',
      'Deploy\Scripts\HardeningScript.ps1',
      'Deploy\Scripts\ReportScript.js',
      'Deploy\Scripts\ReportStyle.css',
      'Deploy\Scripts\Variables.ps1',
      'Deploy\Operating Systems\Win11x64_EntN_en-US_23H2\sources\boot.wim',
      'Deploy\Operating Systems\Win11x64_EntN_en-US_23H2\sources\install.wim',
      'Deploy\Control\ApplicationGroups.xml',
      'Deploy\Control\Applications.xml',
      'Deploy\Control\Bootstrap.ini',
      'Deploy\Control\CustomSettings.ini',
      'Deploy\Control\DriverGroups.xml',
      'Deploy\Control\Drivers.xml',
      'Deploy\Control\OperatingSystemGroups.xml',
      'Deploy\Control\OperatingSystems.xml',
      'Deploy\Control\PackageGroups.xml',
      'Deploy\Control\Packages.xml',
      'Deploy\Control\SelectionProfileGroups.xml',
      'Deploy\Control\SelectionProfiles.xml',
      'Deploy\Control\Settings.xml',
      'Deploy\Control\TaskSequenceGroups.xml',
      'Deploy\Control\Version.xml'
    )
    foreach ($file in $files) {
      if (-not (Test-Path $vol\$file)) {
        Write-Error "[KO] $vol\$file n'est pas présent"
        exit 1
      } else {
        Write-Output "[OK] $vol\$file est bien présent"
      }
    }

demontageIso:
  stage: .post
  needs: ["verifPresence"]
  script: |
    $isom = Get-Volume | where-object { $_.filesystem -eq "UDF"} | Select-Object -ExpandProperty DriveLetter | oss
    $a = -join($isom, ":")
    $driveEject = New-Object -comObject Shell.Application
    $driveEject.NameSpace(17).ParseName($a).InvokeVerb("Eject")
    for (($i = 0); $i -lt 10 -and (Get-Volume | where-object { $_.filesystem -eq "UDF"}); $i++) {
      Start-Sleep -Seconds 1
    }
    if (Get-Volume | where-object { $_.filesystem -eq "UDF"}) {
      Write-Output "Il reste une ISO montée sur la machine !"
      exit 1
    }
